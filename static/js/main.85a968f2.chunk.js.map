{"version":3,"sources":["logo.svg","components/Collapsible.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Collapsible","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTriggerClick","bind","assertThisInitialized","handleTransitionEnd","continueOpenCollapsible","setInnerRef","open","state","isClosed","shouldSwitchAutoOnNextCycle","height","transition","hasBeenOpened","overflow","overflowWhenOpen","inTransition","concat","transitionTime","easing","prevProps","prevState","_this2","shouldOpenOnNextCycle","window","setTimeout","setState","openCollapsible","onOpening","closeCollapsible","onClosing","innerRef","offsetHeight","transitionCloseTime","event","preventDefault","triggerDisabled","accordionPosition","triggerSibling","react_default","a","createElement","className","classParentString","onClose","onOpen","ref","_this3","dropdownStyle","WebkitTransition","msTransition","openClass","disabledClass","trigger","undefined","triggerWhenOpen","TriggerElement","triggerTagName","children","lazyRender","triggerClassString","triggerClassName","triggerOpenedClassName","parentClassString","openedClassName","outerClassString","contentOuterClassName","innerClassString","contentInnerClassName","trim","onClick","style","triggerStyle","onKeyPress","key","tabIndex","renderNonClickableTriggerElement","onTransitionEnd","Component","defaultProps","Header","components_Collapsible","App","components_Header","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85a968f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Collapsible extends Component {\n  constructor(props) {\n    super(props)\n\n    // Bind class methods\n    this.handleTriggerClick = this.handleTriggerClick.bind(this);\n    this.handleTransitionEnd = this.handleTransitionEnd.bind(this);\n    this.continueOpenCollapsible = this.continueOpenCollapsible.bind(this);\n    this.setInnerRef = this.setInnerRef.bind(this);\n\n    // Defaults the dropdown to be closed\n    if (props.open) {\n      this.state = {\n        isClosed: false,\n        shouldSwitchAutoOnNextCycle: false,\n        height: 'auto',\n        transition: 'none',\n        hasBeenOpened: true,\n        overflow: props.overflowWhenOpen,\n        inTransition: false,\n      }\n    } else {\n      this.state = {\n        isClosed: true,\n        shouldSwitchAutoOnNextCycle: false,\n        height: 0,\n        transition: `height ${props.transitionTime}ms ${props.easing}`,\n        hasBeenOpened: false,\n        overflow: 'hidden',\n        inTransition: false,\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(this.state.shouldOpenOnNextCycle){\n      this.continueOpenCollapsible();\n    }\n\n    if (prevState.height === 'auto' && this.state.shouldSwitchAutoOnNextCycle === true) {\n      window.setTimeout(() => { // Set small timeout to ensure a true re-render\n        this.setState({\n          height: 0,\n          overflow: 'hidden',\n          isClosed: true,\n          shouldSwitchAutoOnNextCycle: false,\n        });\n      }, 50);\n    }\n\n    // If there has been a change in the open prop (controlled by accordion)\n    if (prevProps.open !== this.props.open) {\n      if(this.props.open === true) {\n        this.openCollapsible();\n        this.props.onOpening();\n      } else {\n        this.closeCollapsible();\n        this.props.onClosing();\n      }\n    }\n  }\n\n  closeCollapsible() {\n    this.setState({\n      shouldSwitchAutoOnNextCycle: true,\n      height: this.innerRef.offsetHeight,\n      transition: `height ${this.props.transitionCloseTime ?\n        this.props.transitionCloseTime : this.props.transitionTime}ms ${this.props.easing}`,\n      inTransition: true,\n    });\n  }\n\n  openCollapsible() {\n    this.setState({\n      inTransition: true,\n      shouldOpenOnNextCycle: true,\n    });\n  }\n\n  continueOpenCollapsible() {\n    this.setState({\n      height: this.innerRef.offsetHeight,\n      transition: `height ${this.props.transitionTime}ms ${this.props.easing}`,\n      isClosed: false,\n      hasBeenOpened: true,\n      inTransition: true,\n      shouldOpenOnNextCycle: false,\n    });\n  }\n\n  handleTriggerClick(event) {\n    event.preventDefault();\n\n    if (this.props.triggerDisabled) {\n      return\n    }\n\n    if (this.props.handleTriggerClick) {\n      this.props.handleTriggerClick(this.props.accordionPosition);\n    } else {\n      if (this.state.isClosed === true) {\n        this.openCollapsible();\n        this.props.onOpening();\n      } else {\n        this.closeCollapsible();\n        this.props.onClosing();\n      }\n    }\n  }\n\n  renderNonClickableTriggerElement() {\n    if (this.props.triggerSibling && typeof this.props.triggerSibling === 'string') {\n      return (\n        <span className={`${this.props.classParentString}__trigger-sibling`}>{this.props.triggerSibling}</span>\n      )\n    } else if(this.props.triggerSibling) {\n      return <this.props.triggerSibling />\n    }\n\n    return null;\n  }\n\n  handleTransitionEnd() {\n    // Switch to height auto to make the container responsive\n    if (!this.state.isClosed) {\n      this.setState({ height: 'auto', overflow: this.props.overflowWhenOpen, inTransition: false });\n      this.props.onOpen();\n    } else {\n      this.setState({ inTransition: false });\n      this.props.onClose();\n    }\n  }\n\n  setInnerRef(ref) {\n    this.innerRef = ref\n  }\n\n  render() {\n    var dropdownStyle = {\n      height: this.state.height,\n      WebkitTransition: this.state.transition,\n      msTransition: this.state.transition,\n      transition: this.state.transition,\n      overflow: this.state.overflow,\n    }\n\n    var openClass = this.state.isClosed ? 'is-closed' : 'is-open';\n    var disabledClass = this.props.triggerDisabled ? 'is-disabled' : '';\n\n    //If user wants different text when tray is open\n    var trigger = (this.state.isClosed === false) && (this.props.triggerWhenOpen !== undefined)\n                  ? this.props.triggerWhenOpen\n                  : this.props.trigger;\n\n    // If user wants a trigger wrapping element different than 'span'\n    const TriggerElement = this.props.triggerTagName;\n\n    // Don't render children until the first opening of the Collapsible if lazy rendering is enabled\n    var children = this.props.lazyRender\n      && !this.state.hasBeenOpened\n      && this.state.isClosed\n      && !this.state.inTransition ? null : this.props.children;\n\n    // Construct CSS classes strings\n    const triggerClassString = `${this.props.classParentString}__trigger ${openClass} ${disabledClass} ${\n      this.state.isClosed ? this.props.triggerClassName : this.props.triggerOpenedClassName\n    }`;\n    const parentClassString = `${this.props.classParentString} ${\n      this.state.isClosed ? this.props.className : this.props.openedClassName\n    }`;\n    const outerClassString = `${this.props.classParentString}__contentOuter ${this.props.contentOuterClassName}`;\n    const innerClassString = `${this.props.classParentString}__contentInner ${this.props.contentInnerClassName}`;\n\n    return(\n      <div className={parentClassString.trim()}>\n        <TriggerElement\n          className={triggerClassString.trim()}\n          onClick={this.handleTriggerClick}\n          style={this.props.triggerStyle && this.props.triggerStyle}\n          onKeyPress={(event) => {\n            const { key } = event;\n              if (key === ' ' || key === 'Enter') {\n                this.handleTriggerClick(event);\n              }\n            }}\n            tabIndex={this.props.tabIndex && this.props.tabIndex}\n        >\n          {trigger}\n        </TriggerElement>\n\n        {this.renderNonClickableTriggerElement()}\n\n        <div\n          className={outerClassString.trim()}\n          style={dropdownStyle}\n          onTransitionEnd={this.handleTransitionEnd}\n        >\n          <div\n            className={innerClassString.trim()}\n            ref={this.setInnerRef}\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nCollapsible.propTypes = {\n  transitionTime: PropTypes.number,\n  transitionCloseTime: PropTypes.number,\n  triggerTagName: PropTypes.string,\n  easing: PropTypes.string,\n  open: PropTypes.bool,\n  classParentString: PropTypes.string,\n  openedClassName: PropTypes.string,\n  triggerStyle: PropTypes.object,\n  triggerClassName: PropTypes.string,\n  triggerOpenedClassName: PropTypes.string,\n  contentOuterClassName: PropTypes.string,\n  contentInnerClassName: PropTypes.string,\n  accordionPosition: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  handleTriggerClick: PropTypes.func,\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func,\n  onOpening: PropTypes.func,\n  onClosing: PropTypes.func,\n  trigger: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element\n  ]),\n  triggerWhenOpen:PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element\n  ]),\n  triggerDisabled: PropTypes.bool,\n  lazyRender: PropTypes.bool,\n  overflowWhenOpen: PropTypes.oneOf([\n    'hidden',\n    'visible',\n    'auto',\n    'scroll',\n    'inherit',\n    'initial',\n    'unset',\n  ]),\n  triggerSibling: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  tabIndex: PropTypes.number,\n}\n\nCollapsible.defaultProps = {\n  transitionTime: 400,\n  transitionCloseTime: null,\n  triggerTagName: 'span',\n  easing: 'linear',\n  open: false,\n  classParentString: 'Collapsible',\n  triggerDisabled: false,\n  lazyRender: false,\n  overflowWhenOpen: 'hidden',\n  openedClassName: '',\n  triggerStyle: null,\n  triggerClassName: '',\n  triggerOpenedClassName: '',\n  contentOuterClassName: '',\n  contentInnerClassName: '',\n  className: '',\n  triggerSibling: null,\n  onOpen: () => {},\n  onClose: () => {},\n  onOpening: () => {},\n  onClosing: () => {},\n  tabIndex: null,\n};\n\nexport default Collapsible;","import React, {Component} from 'react';\nimport Collapsible from './Collapsible';\n\nclass Header extends Component{\n    render(){\n        return(\n            <div>\n                <Collapsible transitionTime={300} trigger=\"About Me\">\n                    <p>About Me</p>\n                </Collapsible>\n                <p>Projects</p>\n                <p>Contact</p>\n                <p>Home</p>\n            </div>\n        );\n    }\n\n    \n}\n\nexport default Header;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        \n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Cool things are being built... come check in later\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header> */}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}