{"version":3,"sources":["components/Home.js","components/About.js","components/CustomNavBar.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Grid","Jumbotron","Link","to","Button","bsStyle","Component","About","CustomNavBar","Navbar","default","collapseOnSelect","Header","Brand","Collapse","Nav","pullRight","NavItem","eventKey","componentClass","App","BrowserRouter","CustomNavBar_CustomNavBar","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAKqBA,0LAEb,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAAA,2BAEJF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,UACLN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQC,QAAQ,WAAhB,kBARcC,cCHbC,mLAEb,OACIV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BAJmBO,wCCGdE,2LAEb,OACIX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQC,SAAO,EAACC,kBAAgB,GAC5Bd,EAAAC,EAAAC,cAACU,EAAA,EAAOG,OAAR,KACIf,EAAAC,EAAAC,cAACU,EAAA,EAAOI,MAAR,KACIhB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,KAAT,aAGRN,EAAAC,EAAAC,cAACU,EAAA,EAAOK,SAAR,KACIjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKC,WAAS,GACVnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAASC,SAAU,EAAGC,eAAgBjB,IAAMC,GAAG,YAA/C,QAGAN,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAASC,SAAU,EAAGC,eAAgBjB,IAAMC,GAAG,UAA/C,SAGAN,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAASC,SAAU,EAAGC,eAAgBjB,IAAMC,GAAG,aAA/C,uBAlBcG,cCgB3Bc,mLAZX,OACEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAW9B,IACxCC,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWnB,aAPxBD,aCKEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.24f77547.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Jumbotron, Grid, Row, Col, Image, Button } from 'react-bootstrap';\nimport '../styles/Home.css';\n\nexport default class Home extends Component{\n    render(){\n        return(\n            <Grid>\n                <Jumbotron>\n                    <h2>I'm Nick Lin</h2>\n                </Jumbotron>\n                <Link to=\"/about\">\n                    <Button bsStyle=\"primary\">About</Button>\n                </Link>\n            </Grid>\n        );\n    }\n}","import React, {Component} from 'react';\n\nexport default class About extends Component{\n    render(){\n        return(\n            <div>\n                <p>Hello</p>\n            </div>\n        )\n    }\n\n\n\n}","import React, {Component} from 'react';\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport '../styles/CustomNavBar.css';\n\nexport default class CustomNavBar extends Component{\n    render(){\n        return(\n            <div>\n                <Navbar default collapseOnSelect>\n                    <Navbar.Header>\n                        <Navbar.Brand>\n                            <Link to=\"/\">Welcome</Link>\n                        </Navbar.Brand>\n                    </Navbar.Header>\n                    <Navbar.Collapse>\n                        <Nav pullRight>\n                            <NavItem eventKey={1} componentClass={Link} to=\"/website\">\n                                Home\n                            </NavItem>\n                            <NavItem eventKey={2} componentClass={Link} to=\"/about\">\n                                About\n                            </NavItem>\n                            <NavItem eventKey={2} componentClass={Link} to=\"/projects\">\n                                Projects\n                            </NavItem>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n        );\n    }   \n}","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport About from './components/About';\nimport CustomNavBar from './components/CustomNavBar';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <CustomNavBar />\n          <Route exact path=\"/website\" component={Home} />\n          <Route path=\"/about\" component={About} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}